				Modualrity
.....................................................................................

In java Modularity , is presented via "Packages"

Package organize the code  logically.

Customer.java

package com.ibm.cms

public class Customer{}

Java organizes code folders and files Physically.

d:/javaapps/src/
    com/ibm/cms/Customer.java

What about javascript Modularity?

 Javascript is file based modularity physically
 but logically there is no such modularity at language level.

collection of variable declarations and function.

Once js started growing in large scale, dev struck to organize code.

2000, Smart developers started thinking about how to modualrize js code.
 

Module design patterns came.

1.Namespace design pattern : 2000 : jquery
2.AMD -Async Module Defintion : dojo
---------------------------------------------------------
3.CJS - Common JS =  namespace + amd:2005 on wards
4.ES 6 Module design pattern:2012-2015  = amd + cjs
------------------------------------------------------------
5.System :2007 = AMD = CJS + ES 6
6.UMD :2008 = NAMESPACE + AMD + CJS = ES 6
....................................................................................
				Commonjs-CJS
.....................................................................................

How to share code? How to import code?

 Code:
  Could be variables,functions,classes.
  Variables can have any literal string,numbers,boolean,objects,functions...

src
  |
  subfolders
|
index.js

Sharing code :

Keywords
exports
module.exports

Imporing code:
require('fileName')
require('folderName/fileName')

exports:
 Used to share more code from the single file.
 exports packs the entire code into one single js object and returns that object

src/mylib.js

//variables can have any values
//exports to share code with other files 
exports.firstName = 'Subramanian'
exports.lastName = 'Murugan'
exports.age = 18
exports.status = true
exports.getCity = () => 'Coimbatore'
exports.skills = ['Js', 'React', 'java']
exports.location = {
    lat: 1000,
    lng: 897
}

src/index.js
//person is just variable
//person value is object which exported from mylib.js file 

const person = require('./mylib') // function which returns object(code)
console.log(person)

console.log(person.firstName)
console.log(person.getCity())


node src/index.js
{
  firstName: 'Subramanian',
  lastName: 'Murugan',
  age: 18,
  status: true,
  getCity: [Function (anonymous)],
  skills: [ 'Js', 'React', 'java' ],
  location: { lat: 1000, lng: 897 }
}
Subramanian
Coimbatore

require:
  It is a function which returns what ever we have exported from the file.
const obj= require('fileName')
.....................................................................................

...................................................................................
				module.exports
....................................................................................

Export only one item from the file.

eg"
 if you want to share  "Class"
 if you want to share "array"

How to share class?
src/index.js

const UserService = require('./services/user.service')
console.log(UserService)
let userService = new UserService()
console.log(userService.findAll())
console.log(userService.save())

//with destrcturing
let { findAll, save, remove } = new UserService()
console.log(findAll())
console.log(save())
console.log(remove())

src/services/user.service.js

class UserService {
    constructor() {

    }
    findAll() {
        return 'Users'
    }
    save() {
        return 'User saved'
    }
    remove() {
        return 'User Removed'
    }
}
//
module.exports = UserService // we share class , later you can create object 
..................................................................................
		How to share object and how the files links other files

src/index.js

const { findAll } = require('./services/todo.service')
console.log(findAll())


src/services/todo.service.js
const TODOS = require("../mock-data/todos")

class TodoService {
    constructor() { }
    findAll() {
        return TODOS
    }
}
module.exports = new TodoService() // share object directly

mock-data: please refer code repo.
....................................................................................
			   ES 6 module pattern
.....................................................................................

How to share code and how to import code?

export,export default == exports and module.exports

import === require()

src/util.js

export const name = 'Subramanian Murugan'
export const age = 18
export const status = true
export const skills = ['js', 'react', 'node', 'java']
export const address = {
    city: 'Coimbatore'
}
export const getValue = () => 100

src/index.js
import { name, age, address, status, getValue } from './util.js'

console.log(name)
console.log(age)
console.log(address)
console.log(status)
console.log(getValue())

...........

src/services/product.service.js

//syntax -1
// export default class ProductService {

// }

class ProductService {
    constructor() {

    }
    findAll() {
        return 'Products'
    }
}

export default ProductService;

src/index.js
import ProductService from './services/product.service.js'

let productService = new ProductService()
console.log(productService.findAll())

in order to run es 6 modules we need to do the following configuration.

>npm init --yes

package.json
{
  "name": "moduleapps",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}




